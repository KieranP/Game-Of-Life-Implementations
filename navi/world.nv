use std.rand;
use std.str.StringBuffer;

struct LocationOccupied {
  x: int,
  y: int,
}

impl Error for LocationOccupied {
  pub fn error(self): string {
    return `LocationOccupied(${self.x},${self.y})`;
  }
}

const DIRECTIONS: [[int]] = [
  [-1, 1],  [0, 1],  [1, 1], // above
  [-1, 0],           [1, 0], // sides
  [-1, -1], [0, -1], [1, -1] // below
];

struct World {
  width: int,
  height: int,
  tick: int = 0,
  cells: <string, Cell> = {:},
}

impl World {
  fn new(width: int, height: int): World {
    const world = World { width, height };
    world.populate_cells();
    world.prepopulate_neighbours();
    return world;
  }

  fn tick(self) {
    // First determine the action for all cells
    for (let key, cell in self.cells) {
      let alive_neighbours = cell.alive_neighbours();
      if (!cell.alive && alive_neighbours == 3) {
        cell.next_state = true;
      } else if (alive_neighbours < 2 || alive_neighbours > 3) {
        cell.next_state = false;
      } else {
        cell.next_state = cell.alive;
      }
    }

    // Then execute the determined action for all cells
    for (let key, cell in self.cells) {
      cell.alive = cell.next_state || false;
    }

    self.tick += 1;
  }

  // Implement first using string concatenation. Then implement any
  // special string builders, and use whatever runs the fastest
  fn render(self): string {
    // The following works but it slower
    // let rendering = "";
    // for (let y in 0..self.height) {
    //   for (let x in 0..self.width) {
    //     let cell = self.cell_at(x, y);
    //     if (!cell.is_nil()) {
    //       rendering += cell!.to_char().to_string();
    //     }
    //   }
    //   rendering += "\n";
    // }
    // return rendering;

    // The following works but it slower
    // let rendering: [string] = [];
    // for (let y in 0..self.height) {
    //   for (let x in 0..self.width) {
    //     let cell = self.cell_at(x, y);
    //     if (!cell.is_nil()) {
    //       rendering.push(cell!.to_char().to_string());
    //     }
    //   }
    //   rendering.push("\n");
    // }
    // return rendering.join("");

    // The following was the fastest method
    let rendering = StringBuffer.new();
    for (let y in 0..self.height) {
      for (let x in 0..self.width) {
        let cell = self.cell_at(x, y);
        if (!cell.is_nil()) {
          rendering.push(cell!.to_char());
        }
      }
      rendering.push('\n');
    }
    return rendering.to_string();
  }

  fn cell_at(self, x: int, y: int): Cell? {
    return self.cells.get(`${x}-${y}`);
  }

  fn populate_cells(self) {
    for (let y in 0..self.height) {
      for (let x in 0..self.width) {
        let alive = (rand.float(0.0, 1.0) <= 0.2);
        try! self.add_cell(x, y, alive);
      }
    }
  }

  fn add_cell(self, x: int, y: int, alive: bool): bool throws LocationOccupied {
    if (!self.cell_at(x, y).is_nil()) {
      throw LocationOccupied { x, y };
    }

    const cell = Cell.new(x, y, alive);
    self.cells[`${x}-${y}`] = cell;
    return true;
  }

  fn prepopulate_neighbours(self) {
    for (let key, cell in self.cells) {
      for (let set in DIRECTIONS) {
        const neighbour = self.cell_at(
          (cell.x + set[0]),
          (cell.y + set[1]),
        );

        if (!neighbour.is_nil()) {
          cell.neighbours.push(neighbour!);
        }
      }
    }
  }
}
