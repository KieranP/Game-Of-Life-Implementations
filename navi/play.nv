use std.time.DateTime;
use std.process;
use std.env;

const WORLD_WIDTH = 150;
const WORLD_HEIGHT = 40;

struct Play {}

impl Play {
  fn run() {
    let world = World.new(
      WORLD_WIDTH,
      WORLD_HEIGHT,
    );

    let minimal = env.get("MINIMAL") != nil;

    if (!minimal) {
      println(world.render());
    }

    let total_tick = 0;
    let lowest_tick = 100_000_000.0;
    let total_render = 0;
    let lowest_render = 100_000_000.0;

    while(true) {
      const tick_start = DateTime.now_utc();
      world.tick();
      const tick_finish = DateTime.now_utc();
      const tick_time = tick_finish.sub(tick_start).nanoseconds();
      total_tick += tick_time;
      lowest_tick = lowest_tick.min(tick_time as float);
      const avg_tick = (total_tick as float / world.tick as float);

      const render_start = DateTime.now_utc();
      const rendered = world.render();
      const render_finish = DateTime.now_utc();
      const render_time = render_finish.sub(render_start).nanoseconds();
      total_render += render_time;
      lowest_render = lowest_render.min(render_time as float);
      const avg_render = (total_render as float / world.tick as float);

      if (!minimal) {
        print("\u{001b}[H\u{001b}[2J");
      }
      println(
        `#${world.tick} - `,
        `World Tick (L: ${Play._f(lowest_tick)}; A: ${Play._f(avg_tick)}) - `,
        `Rendering (L: ${Play._f(lowest_render)}; A: ${Play._f(avg_render)})`
      );
      if (!minimal) {
        println(rendered);
      }
    }
  }

  fn _f(value: float): float {
    // value is in nanoseconds, convert to milliseconds
    return ((value / 1_000_000.0) * 1_000.0).round() / 1_000.0;
  }
}

fn main() throws {
  Play.run();
}
